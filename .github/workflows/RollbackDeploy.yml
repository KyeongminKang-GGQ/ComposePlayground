name: RollbackDeploy

# 태그이름으로 Rollback 배포 진행
# rc 버전 태그일 경우 STG 배포
# rc 버전 태그가 아닐 경우 PROD 배포

on:
  workflow_dispatch:
    inputs:
      tag:
        type: string
        required: true
        description: 배포할 tag 이름을 입력하세요.
      region:
        type: choice
        required: true
        description: 배포할 AWS region를 선택하세요.
        options:
          - eu-west-1
          - ap-northeast-2

jobs:
  # 입력 받은 tagging이 rc버전이면 STG 환경, 아니면 PROD 환경 배포
  ExtractEnvironment:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.get_environment.outputs.environment }}
    steps:
      - name: Extract Environment
        id: get_environment
        run: |
          if '${{ contains(inputs.tag, 'rc') }}'
          then
            echo "::set-output name=environment::STG"
          else
            echo "::set-output name=environment::PROD"
          fi

      - name: Print environment
        run: |
          echo ${{ inputs.tag }} :: ${{ steps.get_environment.outputs.environment }}

  # 입력 받은 tag 이름으로 배포할 commit 확인
  GetCommitFromTag:
    if: ${{ inputs.tag != '' }}
    uses: ./.github/workflows/GetCommitFromTag.yml
    with:
      tag: ${{ inputs.tag }}

  # 배포 시 필요한 값 가져오기
  GetAwsValue:
    uses: ./.github/workflows/GetAwsValue.yml
    needs: [ExtractEnvironment]
    with:
      environment: ${{ needs.ExtractEnvironment.outputs.environment }}
      region: ${{ inputs.region }}

  # 입력 받은 tag 가 RC일 경우 STG 배포
  RollbackDeployToStg:
    if: ${{ contains(inputs.tag, 'rc') && needs.GetCommitFromTag.outputs.commit != '' }}
    needs: [GetCommitFromTag, GetAwsValue]
    uses: ./.github/workflows/Deploy.yml
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID_STG }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY_STG }}
    with:
      region: ${{ inputs.region }}
      commit: ${{ needs.GetCommitFromTag.outputs.commit }}
      registry: ${{ needs.GetAwsValue.outputs.registry }}
      repository: ${{ needs.GetAwsValue.outputs.repository }}
      taskDefinition: ${{ needs.GetAwsValue.outputs.taskDefinition }}
      container: ${{ needs.GetAwsValue.outputs.container }}
      service: ${{ needs.GetAwsValue.outputs.service }}
      cluster: ${{ needs.GetAwsValue.outputs.cluster }}

  # 입력 받은 tag 가 RC가 아닐 경우 PROD 배포
  RollbackDeployToProd:
    if: ${{ !contains(inputs.tag, 'rc') && needs.GetCommitFromTag.outputs.commit != '' }}
    needs: [GetCommitFromTag, GetAwsValue]
    uses: ./.github/workflows/Deploy.yml
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
    with:
      region: ${{ inputs.region }}
      commit: ${{ needs.GetCommitFromTag.outputs.commit }}
      registry: ${{ needs.GetAwsValue.outputs.registry }}
      repository: ${{ needs.GetAwsValue.outputs.repository }}
      taskDefinition: ${{ needs.GetAwsValue.outputs.taskDefinition }}
      container: ${{ needs.GetAwsValue.outputs.container }}
      service: ${{ needs.GetAwsValue.outputs.service }}
      cluster: ${{ needs.GetAwsValue.outputs.cluster }}

  NotifyToSlackToSuccess:
    if: ${{ always() && (needs.RollbackDeployToStg.result == 'success' || needs.RollbackDeployToProd.result == 'success') }}
    needs: [ExtractEnvironment, GetCommitFromTag, RollbackDeployToStg, RollbackDeployToProd]
    uses: ./.github/workflows/NotifyToSlack.yml
    secrets: inherit
    with:
      environment: ${{ needs.ExtractEnvironment.outputs.environment }}
      version: ${{ inputs.tag }}
      status: success
      region: ${{ inputs.region }}
      commit: ${{ needs.GetCommitFromTag.outputs.commit }}

  NotifyToSlackToFail:
    if: ${{ always() && (needs.RollbackDeployToStg.result == 'failure' || needs.RollbackDeployToProd.result == 'failure') }}
    needs: [ExtractEnvironment, GetCommitFromTag, RollbackDeployToStg, RollbackDeployToProd]
    uses: ./.github/workflows/NotifyToSlack.yml
    secrets: inherit
    with:
      environment: ${{ needs.ExtractEnvironment.outputs.environment }}
      version: ${{ inputs.tag }}
      status: failure
      region: ${{ inputs.region }}
      commit: ${{ needs.GetCommitFromTag.outputs.commit }}
