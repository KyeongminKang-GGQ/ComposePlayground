name: SetTagForStg

# release/hotfix 브랜치에서 STG 환경 배포 전 Tag를 생성하기 위한 수동 Workflow
# hotfix 브랜치면 1.0.0-rc.1+hotfix.yymmdd
# release 브랜치면 1.0.0-rc.1+yymmdd
# hotfix/release 브랜치에 Tag 생성 후 생성된 Tag로 서버 배포를 진행한다.

on:
  workflow_dispatch:

jobs:
  # release/hotfix 브랜치에서 가장 최신의 rc버전 태그를 가져온다
  # 브랜치 명과 동일한 rc 태그만 가져온다.
  GetLatestRcTag:
    if: ${{ startsWith(github.ref_name, 'release/') || startsWith(github.ref_name, 'hotfix/') }}
    uses: ./.github/workflows/GetLatestTag.yml
    with:
      environment: STG

  # release/hotfix 브랜치에서 새로운 RC버전 추출 (기존 rc 버전에서 1 증가 후 태깅)
  MakeNewTagForStg:
    if: ${{ startsWith(github.ref_name, 'release/') || startsWith(github.ref_name, 'hotfix/') }}
    needs: GetLatestRcTag
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.extract_new_tag.outputs.tag }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Print values
        run: |
          echo branch = ${{ github.ref_name }} / current_tag = ${{ needs.GetLatestRcTag.outputs.tag }}

      # 최신 tag에서 rc버전 추출
      # ex) 1.0.0-rc.33+123456 일 경우 33 추출
      - if: ${{ needs.GetLatestRcTag.outputs.tag != '' }}
        name: Extract latest RC tag
        run: |
          if '${{ startsWith(github.ref_name, 'hotfix/') }}'
          then
            echo "LATEST_VERSION=$(echo ${{ needs.GetLatestRcTag.outputs.tag }}) | sed -rn 's/[[:digit:]]{1,3}.[[:digit:]]{1,3}.[[:digit:]]{1,3}-rc.([[:digit:]]*)\+hotfix.[[:digit:]]{6}/\1/p'"
          else
            echo "LATEST_VERSION=$(echo ${{ needs.GetLatestRcTag.outputs.tag }}) | sed -rn 's/[[:digit:]]{1,3}.[[:digit:]]{1,3}.[[:digit:]]{1,3}-rc.([[:digit:]]*)\+[[:digit:]]{6}/\1/p'"
          fi

      - if: ${{ needs.GetLatestRcTag.outputs.tag != '' }}
        name: Print latest RC tag
        run: |
          echo LATEST_VERSION = ${{ env.LATEST_VERSION }}

      # 추출한 rc 버전에서 1 증가, 없을 경우 rc.1로 태깅
      - name: Extract new RC tag
        run: |
          if '${{ env.LATEST_VERSION != '' }}'
          then
            echo "NEW_VERSION=$(($(echo ${{ env.LATEST_VERSION }}) + 1))" >> $GITHUB_ENV
          else
            echo "NEW_VERSION=1" >> $GITHUB_ENV
          fi

      - if: ${{ env.NEW_VERSION != '' }}
        name: Extract new tag
        run: |
          if '${{ startsWith(github.ref_name, 'hotfix/') }}'
          then
            echo "TAG=$(echo '${{ github.ref_name }}' | egrep -o '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}')-rc.${{ env.NEW_VERSION }}+hotfix.$(echo '${{ github.ref_name }}' | egrep -o '[0-9]{6}')" >> $GITHUB_ENV
          elif '${{ startsWith(github.ref_name, 'release/') }}'
          then
            echo "TAG=$(echo '${{ github.ref_name }}' | egrep -o '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}')-rc.${{ env.NEW_VERSION }}$(echo '${{ github.ref_name }}' | egrep -o '\+[0-9]{6}')" >> $GITHUB_ENV
          else
            echo ""
          fi

      - if: ${{ env.TAG != '' }}
        name: Print tag name
        run: |
          echo TAG = ${{ env.TAG }}

  # release/hotfix 브랜치에서 새로운 RC버전 태깅
  SetTagForStg:
    if: ${{ startsWith(github.ref_name, 'release/') || startsWith(github.ref_name, 'hotfix/') }}
    needs: MakeNewTagForStg
    runs-on: ubuntu-latest
    steps:
      - if: ${{ needs.MakeNewTagForStg.outputs.tag != '' }}
        name: Tag commit
        uses: tvdias/github-tagger@v0.0.1
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ needs.MakeNewTagForStg.outputs.tag }}

  ExtractMilestone:
    if: ${{ startsWith(github.ref_name, 'release/') || startsWith(github.ref_name, 'hotfix/') }}
    runs-on: ubuntu-latest
    outputs:
      milestone: ${{ env.MILESTONE }}
    steps:
      - uses: actions/checkout@v2
      - name: Extract Version Name
        run: |
          if '${{ startsWith(github.ref_name, 'hotfix/') }}'
          then
            echo "MILESTONE=$(echo '${{ github.ref_name }}' | egrep -o '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}')+hotfix.$(echo '${{ github.ref_name }}' | egrep -o '[0-9]{6}')" >> $GITHUB_ENV
          elif '${{ startsWith(github.ref_name, 'release/') }}'
          then
            echo "MILESTONE=$(echo '${{ github.ref_name }}' | egrep -o '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\+[0-9]{6}')" >> $GITHUB_ENV
          else
            echo ""
          fi

      - name: Print MILESTONE
        run: |
          echo MILESTONE = ${{ env.MILESTONE }}

  ReportIssue:
    needs: [ExtractMilestone]
    runs-on: ubuntu-latest
    steps:
      - name: Send Issue Result
        id: find-issues
        uses: KyeongminKang-GGQ/action-slack@v3
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }} # required
        with:
          status: report-issue
          fields: all
          milestone: ${{ needs.ExtractMilestone.outputs.milestone }}

      - name: Print
        run: |
          echo "ISSUE_COUNT=$(echo '${{ steps.find-issues.outputs.issues }}' | jq '. | length')"
